-Ddatabase.connection.username="root"
-Ddatabase.connection.password="" 
-Ddatabase.connection.uri="jdbc:mysql://localhost:3306/db-hrms?zeroDateTimeBehavior=convertToNull"



//	@ExceptionHandler(RuntimeException.class)
//	@ResponseBody
//	public ErrorMessageDTO handleException(RuntimeException e, HttpServletResponse response) throws IOException {
//		HttpStatus responseCode = HttpStatus.BAD_REQUEST;
//		if (e instanceof ResourceNotFoundException) {
//			responseCode = HttpStatus.NOT_FOUND;
//		} else if (e instanceof AccessException) {
//			responseCode = HttpStatus.FORBIDDEN;
//		} else if (e instanceof IllegalArgumentException) {
//			responseCode = HttpStatus.FORBIDDEN;
//		}
//		response.setStatus(responseCode.value());
//		ErrorMessageDTO msg = new ErrorMessageDTO();
//		msg.setMessage(e.getMessage());
//		return msg;
//	}




<!-- Simple implementation of the standard JDBC DataSource interface, 
        configuring the plain old JDBC DriverManager via bean properties -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
			<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
			<property name="username" value="${database.connection.username}"/>
			<property name="password" value="${databse.connection.password}"/>
			<property name="url" value="${database.connection.uri}"/>
	</bean>
	
	 <!-- This produces a container-managed EntityManagerFactory; 
         rather than application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean-->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
      <property name="dataSource" ref="dataSource" />
      <!-- This makes /META-INF/persistence.xml is no longer necessary -->
      <property name="packagesToScan" value="com.sjc.hrms.model" />
      <!-- JpaVendorAdapter implementation for Hibernate EntityManager.
           Exposes Hibernate's persistence provider and EntityManager extension interface -->
      <property name="jpaVendorAdapter">
         <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
      </property>
      <property name="jpaProperties">
         <props>
            <prop key="hibernate.hbm2ddl.auto">update</prop>
            <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
         </props>
      </property>
   </bean>
	
	
	
	<!-- This transaction manager is appropriate for applications that use a single JPA EntityManagerFactory for transactional data access. 
        JTA (usually through JtaTransactionManager) is necessary for accessing multiple transactional resources within the same transaction. -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- 	We enable the configuration of transactional behavior based on annotations, and we set the transactionManager we created. -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	  <!-- responsible for registering the necessary Spring components that power annotation-driven transaction management; 
        such as when @Transactional methods are invoked -->


	<!-- This resolves messages from resource bundles for different locales -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="messages" />
    </bean>